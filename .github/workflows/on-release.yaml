name: Release CI

on:
  push:
    tags:
      - 'v*.*.*'
      - '!v*.*.*-rc*'

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Validate Tag
        run: |
          node -e "if (!/^v\d+\.\d+\.\d+$/.test('${{ github.ref_name }}')) { console.error('Invalid version provided');process.exit(1);}"

      - name: Validate VERSION
        run: |
          version=$(cat cmd/thor/VERSION)
          tag="${{ github.ref_name }}"
          tag="${tag#v}"  # Remove the "v" prefix from the tag
          if [ "$tag" != "$version" ]; then
            echo "VERSION file does not match tag"
            exit 1
          fi

      - name: Validate API Version
        run: |
          thor_version=$(cat cmd/thor/VERSION)
          api_version=$(grep -o 'version: [0-9.]*' api/doc/thor.yaml | awk '{print $2}')
          if [ "$thor_version" != "$api_version" ]; then
            echo "API spec version ($api_version) does not match Thor version ($thor_version)"
            exit 1
          fi

      - name: Validate Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # This step validates that the tag is an official release
        run: |
          prerelease=$(gh release view ${{ github.ref_name }} --json isPrerelease | jq -r '.isPrerelease')
          if [ "$prerelease" != "false" ]; then
            echo "Tag is not an official release"
            exit 1
          fi

  retag-and-publish-docker-image:
    name: Retag and Publish Docker Image
    runs-on: ubuntu-22.04
    needs:
      - validate
    permissions:
      contents: read
      packages: write
    environment: docker-publish
    steps:
      - name: Find Latest RC Tag
        id: find-rc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract base version (e.g., v2.1.0 from v2.1.0)
          base_version="${{ github.ref_name }}"
          echo "Base version: $base_version"
          
          # Find all RC tags for this version and get the latest one
          latest_rc=$(gh api repos/vechain/thor/git/refs/tags \
            --jq '[.[]
              | select(.ref | test("refs/tags/v2.3.1-rc.[0-9]+$"))
              | {ref, rc: (.ref | capture("rc\\.(?<num>[0-9]+)$").num | tonumber)}
            ]
            | sort_by(.rc)
            | last
            | .ref')

          # remove the "refs/tags/" prefix
          latest_rc="${latest_rc#refs/tags/}"
          
          if [ -z "$latest_rc" ]; then
            echo "No RC tag found for $base_version"
            exit 1
          fi
          
          echo "Latest RC tag: $latest_rc"
          echo "latest_rc_tag=$latest_rc" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and Retag Docker Images
        run: |
          RC_TAG="${{ steps.find-rc.outputs.latest_rc_tag }}"
          RELEASE_TAG="${{ github.ref_name }}"
          REPO="${{ github.repository }}"
          
          echo "Pulling RC images for tag: $RC_TAG"
          
          # Pull RC images from both registries
          docker pull $REPO:$RC_TAG
          docker pull ghcr.io/$REPO:$RC_TAG
          
          echo "Retagging images for release: $RELEASE_TAG"
          
          # Retag Docker Hub images
          docker tag $REPO:$RC_TAG $REPO:$RELEASE_TAG
          docker tag $REPO:$RC_TAG $REPO:latest
          
          # Retag GHCR images  
          docker tag ghcr.io/$REPO:$RC_TAG ghcr.io/$REPO:$RELEASE_TAG
          docker tag ghcr.io/$REPO:$RC_TAG ghcr.io/$REPO:latest
          
          echo "Pushing retagged images"
          
          # Push to Docker Hub
          docker push $REPO:$RELEASE_TAG
          docker push $REPO:latest
          
          # Push to GHCR
          docker push ghcr.io/$REPO:$RELEASE_TAG
          docker push ghcr.io/$REPO:latest

  publish-binaries:
    name: Publish Binaries
    uses: ./.github/workflows/release-binaries.yaml
    secrets: inherit
    needs:
      - validate
    permissions:
      contents: write
      packages: write
    with:
      binary: 'thor'
