name: Master branch CI

on:
  push:
    branches:
      - 'master'

jobs:
  run-unit-tests:
    name: Run Unit Tests
    uses: ./.github/workflows/test.yaml

  lint:
    name: Lint
    uses: ./.github/workflows/lint-go.yaml

  generate-tags:
    name: Generate Docker Tags
    runs-on: ubuntu-latest
    outputs:
      tag_date: ${{ steps.tag_date.outputs.tag_date }}
      short_sha: ${{ steps.short_sha.outputs.short_sha }}
    steps:
      - name: Generate Tag Date
        id: tag_date
        run: echo "tag_date=$(date +'%Y%m%d')" >> "$GITHUB_OUTPUT"
      - name: Generate Short SHA
        id: short_sha
        run: echo "short_sha=$(echo $GITHUB_SHA | cut -c1-7)" >> "$GITHUB_OUTPUT"

  publish-docker-image:
    name: Publish Docker Image
    uses: ./.github/workflows/publish-docker-images.yaml
    secrets: inherit
    needs:
      - run-unit-tests
      - generate-tags
      - lint
    permissions:
      contents: read
      packages: write
    with:
      images: |
        ghcr.io/${{ github.repository }}
      # eg: master-20240321-7d8e9f2
      tags: |
        type=raw,value=master-${{ needs.generate-tags.outputs.tag_date }}-${{ needs.generate-tags.outputs.short_sha }}
        type=raw,value=master-latest

  notify-slack:
    name: Notify Slack
    needs:
      - publish-docker-image
      - generate-tags
      - lint
      - run-unit-tests
    if: always() && (needs.publish-docker-image.result != 'success' || needs.run-unit-tests.result != 'success' || needs.lint.result != 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        with:
          payload: |
            {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":alert: Thor Build Failed"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:*\n${{ github.repository }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch:*\nmaster"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Status:*\n${{ job.status }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit Message:*\n${{ github.event.head_commit.message }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit Author:*\n${{ github.event.head_commit.author.name }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit Date:*\n${{ github.event.head_commit.timestamp }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit URL:*\n${{ github.event.head_commit.url }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Unit Tests Status:*\n${{ needs.run-unit-tests.result }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Lint Status:*\n${{ needs.lint.result }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Docker Publish:*\n${{ needs.publish-docker-image.result }}"
                  }
                ]
              }
            }
